# -*- coding: utf-8 -*-
"""Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wu2TxUrYn1zcwsPkNiI7AZpaJJS2hv6n
"""

import torch

class Model(nn.Module):
  def __init__(self):
    super().__init__()
    self.cnn1 = nn.Conv2d(in_channels=3,out_channels=32,kernel_size=3,stride=1,padding=1)
    self.cnn1_bn = nn.BatchNorm2d(32)
    self.cnn2= nn.Conv2d(in_channels=32,out_channels=64,kernel_size=3,stride=1,padding=1) 
    self.cnn2_bn = nn.BatchNorm2d(64)
    self.cnn3 = nn.Conv2d(in_channels=64,out_channels=128,kernel_size=3,stride=1,padding=1)
    self.cnn3_bn = nn.BatchNorm2d(128)
    self.cnn4= nn.Conv2d(in_channels=128,out_channels=256,kernel_size=3,stride=1,padding=1) 
    self.cnn4_bn = nn.BatchNorm2d(256)

    self.fc1= nn.Linear(16384,128)
    self.fc2= nn.Linear(128,1)
    self.dropout = nn.Dropout(0.3)

  def forward(self, x):
    x = self.cnn1(x)
    x = self.cnn1_bn(x)
    x = F.relu(x)
    x = F.max_pool2d(x, kernel_size=(2,2))

    x = self.cnn2(x)
    x = self.cnn2_bn(x)
    x = F.relu(x)
    x = F.max_pool2d(x, kernel_size=(2,2))

    x = self.cnn3(x)
    x = self.cnn3_bn(x)
    x = F.relu(x)
    x = F.max_pool2d(x, kernel_size=(2,2))

    x = self.cnn4(x)
    x = self.cnn4_bn(x)
    x = F.relu(x)
    # x = F.max_pool2d(x, kernel_size=(2,2))

    x = torch.flatten(x, start_dim=1)
    x = F.relu(self.fc1(x))
    # x = torch.dropout(x, 0.3,train=True)
    x = self.fc2(x)
    # x = torch.softmax(x, dim=1)

    return x